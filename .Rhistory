cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
rm(list=ls())
fx <- function(x)
{
x*exp(-x^2)
}
flx <- function(x)
{
exp(-x^2)*(1-2*x^2)
}
x0 <- 0 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- fx(x)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
rm(list=ls())
fx <- function(x)
{
x*exp(-x^2)
}
rm(list=ls())
ls()
fx <- function(x)
{
x*exp(-x^2)
}
flx <- function(x)
{
(exp(-x^2))*(1-(2*x^2))
}
x0 <- 0 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- fx(x)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
x0 <- 5 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- fx(x)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
fx <- function(x)
{
x*cos(x)
}
flx <- function(x)
{
1+sen(x)
}
x0 <- 5 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- fx(x)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
flx <- function(x)
{
1+sin(x)
}
x0 <- 5 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- fx(x)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
x0 <- 0.5 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- fx(x)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
x0 <- 5 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- fx(x)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
x0 <- 5 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- abs(x-x0)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
x0 <- 0.5 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- abs(x-x0)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
x0 <- 2 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- abs(x-x0)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
uniroot(f, interval = c(0.5,0.1))
uniroot(fx, interval = c(0.5,0.1))
uniroot(fx, interval = c(-0.1,0.1))
uniroot(fx, interval = c(-0.5,0.5))
uniroot(fx, interval = c(0,1))
uniroot(fx, interval = c(0,1))
fx <- function(x)
{
x-cos(x)
}
flx <- function(x)
{
1+sin(x)
}
x0 <- 2 #chute inicial
erro <- fx(x0)
niter <- 1
while(erro>1e-10)
{
x <- x0-fx(x0)/flx(x0)
erro <- abs(x-x0)
x0 <- x
cat(niter,x,fx(x),flx(x),"\n")
niter <- niter+1
}
uniroot(fx, interval = c(0,1))
F <- function(x)
{
matrix(nrow = 2)
f[1] <- x[1]+x[2]-x[1]*x[2]+2
f[2] <- x[1]*exp(-x[2])-1
return(f)
}
library(rootSolve)
multiroot(f=F,start = c(0.5,0.5))
multiroot(F,start = c(0.5,0.5))
fy <- function(x)
{
matrix(nrow = 2)
f[1] <- x[1]+x[2]-x[1]*x[2]+2
f[2] <- x[1]*exp(-x[2])-1
return(f)
}
multiroot(f=fy,start = c(0.5,0.5))
fy <- function(x)
{
f <-  matrix(nrow = 2)
f[1] <- x[1]+x[2]-x[1]*x[2]+2
f[2] <- x[1]*exp(-x[2])-1
return(f)
}
multiroot(f=fy,start = c(0.5,0.5))
rm(list=ls())
dexpexp <- function(x,mu,beta)
{
beta/mu*exp(-x/mu)*(1-exp(-x/mu))^(beta-1)
}
pexpexp <- function(q, mu, beta)
{
(1-exp(-q/mu))^beta
}
qexpexp <- function(p, mu, beta)
{
-mu*log(1-p^(1/beta))
}
rexpexp <- function(n, mu, beta)
{
u <- runif(n)
qexpexp(u, mu, beta)
}
x <- rexpexp(n=50,mu=2,beta=1.5)
library(fitdistrplus)
ajuste <- fitdist(x,"expexp",start=list(mu=1,beta=1))
summary(ajuste)
plot(ajuste)
x11()
plot(ajuste)
x
summary(ajuste)
mean(x)
mean(x); sqrt(var(x))
ecdf(x)
Femp <- ecdf(x)
plot(Femp)
x11()
plot(Femp)
Fteo <- pexpexp(sort(x),mu=ajuste$estimate[1],beta = ajuste$estimate[2])
lines(sort(x),Fteo,col="red")
x11()
plot(ajuste)
s <- (1:length(x))/50
plot(Fteo,s)
abline(0,1)
plot(ajuste)
s <- (1:length(x))/length(x)
Qemp <- qexpexp(Femp,ajuste$estimate[1],ajuste$estimate[2])
Qemp <- qexpexp(s,ajuste$estimate[1],ajuste$estimate[2])
Qteo <- qexpexp(Fteo, ajuste$estimate[1],ajuste$estimate[2])
plot(Qemp,Qteo)
abline(0,1)
x11()
plot(ajuste)
x11()
hist(x, probability = T)
curve(dexpexp(x,mu=ajuste$estimate[1],beta = ajuste$estimate[2]),
col="red",lty=1,lwd=2, add = TRUE)
hist(x, probability = T, ylim = 40)
hist(x, probability = T, ylim = c(0,40))
curve(dexpexp(x,mu=ajuste$estimate[1],beta = ajuste$estimate[2]),
col="red",lty=1,lwd=2, add = TRUE)
x11()
hist(x, probability = T, ylim = c(0,40))
x11()
hist(x, probability = T, ylim = c(0,0.4))
curve(dexpexp(x,mu=ajuste$estimate[1],beta = ajuste$estimate[2]),
col="red",lty=1,lwd=2, add = TRUE)
x11()
hist(x, probability = T, ylim = c(0,0.35))
curve(dexpexp(x,mu=ajuste$estimate[1],beta = ajuste$estimate[2]),
col="red",lty=1,lwd=2, add = TRUE)
?plot
n     <- seq(20,100,10) #tamanho das amostras (20,30,40,...,100)
beta  <- 1.5 #eu escolho os valres dos parametros
mu    <- 1 #a variação de mu não influencia na simulação (parametro de escala)
B     <- 1000  #replicações
X   <- matrix(rexpexp(n=B*max(n),beta=1.5,mu=1),nrow = max(n))
aux <- matrix(0,ncol = 2,nrow = B) #matriz de beta e mu estimados
for(i in 1:B)
{
x <- X[,i]
emv <- fitdist(x,"expexp",start = list(beta=1.5,mu=1))
aux[i,] <- emv$estimate
cat(i,"\n")
i <- i+1
}
aux
vb <- mean(aux[,1])-1.5
vb
vm <- mean(aux[,2])-1
vm
vb    <- c()
vm    <- c()
rmseb <- c()
rmsem <- c()
k     <- 1
for(n in seq(20,100,10))
{
for(i in 1:B)
{
x <- X[1:n,i]
emv <- fitdist(x,"expexp",start = list(beta=1.5,mu=1))
aux[i,] <- emv$estimate
}
vb[k]    <- mean(aux[,1]-1.5)
vm[k]    <- mean(aux[,2]-1)
rmseb[k] <- sqrt(mean(aux[,1]-1.5)^2)
rmsem[k] <- sqrt(mean(aux[,2]-1)^2)
k        <- k+1
cat(vb,vm,rmseb,rmsem,k,"\n")
}
x11()
par(mfrow=c(2,2))
plot(seq(20,100,10),vb,type='b')
plot(seq(20,100,10),vm,type='b')
plot(seq(20,100,10),rmseb,type='b')
plot(seq(20,100,10),rmsem,type='b')
vb
vm
vb1 <- mean(aux[,1])-1.5
vm1 <- mean(aux[,2])-1
vb    <- c()
vm    <- c()
rmseb <- c()
rmsem <- c()
k     <- 1
for(n in seq(20,100,10))
{
for(i in 1:B)
{
x <- X[1:n,i]
emv <- fitdist(x,"expexp",start = list(beta=1.5,mu=1))
aux[i,] <- emv$estimate
}
vb[k]    <- mean(aux[,1]-1.5)
vm[k]    <- mean(aux[,2]-1)
rmseb[k] <- sqrt(mean(aux[,1]-1.5)^2)
rmsem[k] <- sqrt(mean(aux[,2]-1)^2)
k        <- k+1
#cat(vb,vm,rmseb,rmsem,k,"\n")
}
length(vb)
vb
i   <- 1
for(i in 1:B)
{
x <- X[,i]
emv <- fitdist(x,"expexp",start = list(beta=1.5,mu=1))
aux[i,] <- emv$estimate
cat(i,"\n")
i <- i+1
}
vb1 <- mean(aux[,1])-1.5
vm1 <- mean(aux[,2])-1
vb1
aux
x11()
par(mfrow=c(2,2))
plot(seq(20,100,10),vb,type='b')
plot(seq(20,100,10),vm,type='b')
plot(seq(20,100,10),rmseb,type='b')
plot(seq(20,100,10),rmsem,type='b')
library(installr)
install.packages("installr", dependencies = T)
library(installr)
updateR()
citation()
citation()
version
citation()
citation
citation()
rm(list = ls())
jogadores <- names("Fernando";"Thales";"Diogo";"Ricardo";"Aline";"Joao";"Gustavo";"Albino";"Wellinton")
jogadores <- names("Fernando","Thales","Diogo","Ricardo","Aline","Joao","Gustavo","Albino","Wellinton")
jogadores <- c("Fernando","Thales","Diogo","Ricardo","Aline","Joao","Gustavo","Albino","Wellinton")
jogadores
setwd("C:\\Users\\Natalia\\Google Drive\\Teste Cientista dados\\")
dados <- read.csv("tabela.csv",header = TRUE,sep = ";")
dados
jogadores <- c("Fernando","Thales","Diogo","Ricardo","Aline","Joao","Gustavo","Albino","Wellinton")
jogadores
notas <- c(9,8,3,7,8,10,6,5,3)
jogo <- table("jogadores","notas")
jogo
jogo <- write.table("jogadores","notas")
jogo
jogo <- cbind("jogadores","notas")
jogo
jogo <- cbind("jogadores[]","notas[]")
jogo
?cbind
jogo <- data.frame("jogadores","notas")
jogo
jogo <- data.frame(jogadores,notas)
jogo
jogo[order(jogo$jogadores,jogo$notas),decreasing=c(FALSE,TRUE)),]
max_notas <- jogo[order(jogo$jogadores,jogo$notas,decreasing=c(FALSE,TRUE)),]
max_notas
max_notas <- jogo[order(jogo$jogadores,jogo$notas,decreasing=c(TRUE,FALSE)),]
max_notas
max_notas <- jogo[order(jogo$notas,decreasing=TRUE),]
max_notas
media <- mean(jogo$notas)
media
desvio <- var(jogo$notas)^(0.5)
desvio
19/3
20/3
min_notas <- jogo[order(jogo$notas),]
<- jogo[order(jogo$notas),]
min_notas
a <- c(max_notas[1],min_notas[1])
a
max_notas
n <- length(max_notas)
n
n <- length(max_notas$notas)
n
i <- 1
i
m1 <- sort(jogo$notas, decreasing = TRUE)
m1==max_notas
notas_ordem <- sort(jogo$notas, decreasing = TRUE)
notas_ordem
a <- data.frame(3,2)
a
n <- length(max_notas$notas)
i <- 1
a <- c(max_notas[i+1,],max_notas[n-1])
a <- c(max_notas[i+1,],max_notas[n-1,])
a
n <- length(max_notas$notas)
i <- 0
a <- c(max_notas[i+1,],max_notas[n-1,])
a
max_notas
n[1,]
max_notas[1,]
a <- max_notas[i+1,n-1]
a
a <- c(max_notas[i+1,n-1])
a
a <- c(max_notas[i+1,],max_notas[n-1,])
a
str(a)
a <- c(max_notas[i+1,])
a
str(a)
a <-
?array
a <-
?array()
?array()
a <-
?array
grupos <- list(max_notas[i+1,],max_notas[n-1,])
grupos
grupos[i] <- list(max_notas[i+1,],max_notas[n-1,])
grupos[i]
grupos[1]
grupos[[1]]
grupos <- list(max_notas[i+1,],max_notas[n-1,])
grupos
grupos <- list("joao",10)
grupos
grupos <- list("joao"10)
for (i in 1:n)
{
grupos <- list(max_notas[i+1,],max_notas[n-1,])
i <- i+1
}
grupos
for (i in 1:n)
{
grupos[i] <- list(max_notas[i+1,],max_notas[n-1,])
i <- i+1
}
for (i in 1:n)
{
grupos[[i]] <- list(max_notas[i+1,],max_notas[n-1,])
i <- i+1
}
grupos
?binomial()
pbinomial()
?pbinomial()
?pbinom()
pbinom(24,320,0.5)
fungo <- sum(pbinom(0:24,320,0.5))
fungo
pbinom(0:24,320,0.5)
fx <- pbinom(0:24,320,0.5)
x11()
plot(fx)
fungo
x11()
plot(k,fx)
k <- seq(0, 320, by=20)
fx <- pbinom(0:24,320,0.5)
x11()
plot(k,fx)
length(k)
length(fx)
length(k)
length(fx)
k <- seq(0, 400, by=20)
k <- seq(0, 320, by=13)
length(k)
fx <- pbinom(0:24,320,0.5)
length(fx)
x11()
plot(k,fx)
fungo
